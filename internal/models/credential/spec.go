/*
Copyright Â© 2022 VMware, Inc. All Rights Reserved.
SPDX-License-Identifier: MPL-2.0
*/

// Code generated by go-swagger; DO NOT EDIT.

package credentialmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/swag"
)

// VmwareTanzuManageV1alpha1AccountCredentialSpec The credential object spec.
//
// swagger:model vmware.tanzu.manage.v1alpha1.account.credential.Spec
type VmwareTanzuManageV1alpha1AccountCredentialSpec struct {

	// The Tanzu capability for which the credential shall be used.
	Capability string `json:"capability,omitempty"`

	// Credential data.
	Data *VmwareTanzuManageV1alpha1AccountCredentialData `json:"data,omitempty"`

	// Metadata and properties of the credential.
	Meta *VmwareTanzuManageV1alpha1AccountCredentialMeta `json:"meta,omitempty"`
}

// MarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1AccountCredentialSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1AccountCredentialSpec) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1AccountCredentialSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VmwareTanzuManageV1alpha1AccountCredentialMeta Credential metadata identifying additional details and the purpose of the
// credential.
//
// swagger:model vmware.tanzu.manage.v1alpha1.account.credential.Meta
type VmwareTanzuManageV1alpha1AccountCredentialMeta struct {

	// Provider of the credential.
	Provider *VmwareTanzuManageV1alpha1AccountCredentialProvider `json:"provider,omitempty"`

	// Temporary credential support flag indicates if this credential should be kept private
	// and instead be used to generate temporary, short-lived, and scoped credentials.
	TemporaryCredentialSupport bool `json:"temporaryCredentialSupport,omitempty"`
}

// VmwareTanzuManageV1alpha1AccountCredentialProvider Provider definition - indicates the credential provider.
//
//   - PROVIDER_UNSPECIFIED: Unspecified credential provider (default).
//   - AWS_EC2: AmazonWeb Services EC2.
//   - GENERIC_S3: Generic S3 provider.
//   - AZURE_AD: Azure Active Directory.
//   - AWS_EKS: AWS EKS.
//   - AZURE_AKS: Azure AKS.
//   - GENERIC_KEY_VALUE: Generic key value pair.
//
// swagger:model vmware.tanzu.manage.v1alpha1.account.credential.Provider
type VmwareTanzuManageV1alpha1AccountCredentialProvider string

func NewVmwareTanzuManageV1alpha1AccountCredentialProvider(value VmwareTanzuManageV1alpha1AccountCredentialProvider) *VmwareTanzuManageV1alpha1AccountCredentialProvider {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VmwareTanzuManageV1alpha1AccountCredentialProvider.
func (m VmwareTanzuManageV1alpha1AccountCredentialProvider) Pointer() *VmwareTanzuManageV1alpha1AccountCredentialProvider {
	return &m
}

const (

	// VmwareTanzuManageV1alpha1AccountCredentialProviderPROVIDERUNSPECIFIED captures enum value "PROVIDER_UNSPECIFIED"
	VmwareTanzuManageV1alpha1AccountCredentialProviderPROVIDERUNSPECIFIED VmwareTanzuManageV1alpha1AccountCredentialProvider = "PROVIDER_UNSPECIFIED"

	// VmwareTanzuManageV1alpha1AccountCredentialProviderAWSEC2 captures enum value "AWS_EC2"
	VmwareTanzuManageV1alpha1AccountCredentialProviderAWSEC2 VmwareTanzuManageV1alpha1AccountCredentialProvider = "AWS_EC2"

	// VmwareTanzuManageV1alpha1AccountCredentialProviderGENERICS3 captures enum value "GENERIC_S3"
	VmwareTanzuManageV1alpha1AccountCredentialProviderGENERICS3 VmwareTanzuManageV1alpha1AccountCredentialProvider = "GENERIC_S3"

	// VmwareTanzuManageV1alpha1AccountCredentialProviderAZUREAD captures enum value "AZURE_AD"
	VmwareTanzuManageV1alpha1AccountCredentialProviderAZUREAD VmwareTanzuManageV1alpha1AccountCredentialProvider = "AZURE_AD"

	// VmwareTanzuManageV1alpha1AccountCredentialProviderAWSEKS captures enum value "AWS_EKS"
	VmwareTanzuManageV1alpha1AccountCredentialProviderAWSEKS VmwareTanzuManageV1alpha1AccountCredentialProvider = "AWS_EKS"

	// VmwareTanzuManageV1alpha1AccountCredentialProviderAZUREAKS captures enum value "AZURE_AKS"
	VmwareTanzuManageV1alpha1AccountCredentialProviderAZUREAKS VmwareTanzuManageV1alpha1AccountCredentialProvider = "AZURE_AKS"

	// VmwareTanzuManageV1alpha1AccountCredentialProviderGENERICKEYVALUE captures enum value "GENERIC_KEY_VALUE"
	VmwareTanzuManageV1alpha1AccountCredentialProviderGENERICKEYVALUE VmwareTanzuManageV1alpha1AccountCredentialProvider = "GENERIC_KEY_VALUE"
)

// for schema
var vmwareTanzuManageV1alpha1AccountCredentialProviderEnum []interface{}

func init() {
	var res []VmwareTanzuManageV1alpha1AccountCredentialProvider
	if err := json.Unmarshal([]byte(`["PROVIDER_UNSPECIFIED","AWS_EC2","GENERIC_S3","AZURE_AD","AWS_EKS","AZURE_AKS","GENERIC_KEY_VALUE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareTanzuManageV1alpha1AccountCredentialProviderEnum = append(vmwareTanzuManageV1alpha1AccountCredentialProviderEnum, v)
	}
}

// MarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1AccountCredentialMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1AccountCredentialMeta) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1AccountCredentialMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
