// © Broadcom. All Rights Reserved.
// The term “Broadcom” refers to Broadcom Inc. and/or its subsidiaries.
// SPDX-License-Identifier: MPL-2.0

// Code generated by go-swagger; DO NOT EDIT.

package policyrecipeimagemodel

import (
	"github.com/go-openapi/swag"

	policyrecipeimagecommonmodel "github.com/vmware/terraform-provider-tanzu-mission-control/internal/models/policy/recipe/image/common"
)

// VmwareTanzuManageV1alpha1CommonPolicySpecImageV1Custom is model for custom recipe version v1
//
// The input schema for image policy custom recipe.
//
// swagger:model VmwareTanzuManageV1alpha1CommonPolicySpecImageV1Custom
type VmwareTanzuManageV1alpha1CommonPolicySpecImageV1Custom struct {

	// Audit (dry-run)
	// Creates this policy for dry-run. Violations will be logged but not denied. Defaults to false (deny).
	Audit *bool `json:"audit,omitempty"`

	// This specifies a list of rules that defines allowed image patterns.
	// Required: true
	// Min Items: 1
	Rules []*VmwareTanzuManageV1alpha1CommonPolicySpecImageV1CustomRules `json:"rules"`
}

// MarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1CommonPolicySpecImageV1Custom) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1CommonPolicySpecImageV1Custom) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1CommonPolicySpecImageV1Custom
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// VmwareTanzuManageV1alpha1CommonPolicySpecImageV1CustomRules Rules.
//
// swagger:model VmwareTanzuManageV1alpha1CommonPolicySpecImageV1CustomRules
type VmwareTanzuManageV1alpha1CommonPolicySpecImageV1CustomRules struct {

	// Allowed image hostnames, wildcards are supported(for example: *.mycompany.com). Empty field is equivalent to *.
	Hostname string `json:"hostname,omitempty"`

	// Allowed image names, wildcards are supported(for example: fooservice/*). Empty field is equivalent to *.
	ImageName string `json:"imageName,omitempty"`

	// Allowed port(if presented) of the image hostname, must associate with valid hostname. Wildcards are supported.
	Port string `json:"port,omitempty"`

	// The flag used to enforce digest to appear in container images.
	RequireDigest *bool `json:"requireDigest,omitempty"`

	// Tag
	Tag *policyrecipeimagecommonmodel.VmwareTanzuManageV1alpha1CommonPolicySpecImageV1RulesTag `json:"tag,omitempty"`
}

// MarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1CommonPolicySpecImageV1CustomRules) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1CommonPolicySpecImageV1CustomRules) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1CommonPolicySpecImageV1CustomRules
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}
