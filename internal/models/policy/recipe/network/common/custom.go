/*
Copyright Â© 2023 VMware, Inc. All Rights Reserved.
SPDX-License-Identifier: MPL-2.0
Code generated by go-swagger; DO NOT EDIT.
*/

package policyrecipenetworkcommonmodel

import "github.com/go-openapi/swag"

// Defines values for V1alpha1CommonPolicySpecNetworkV1CustomRulesPortsProtocol.
const (
	TCP V1alpha1CommonPolicySpecNetworkV1CustomRulesPortsProtocol = "TCP"
	UDP V1alpha1CommonPolicySpecNetworkV1CustomRulesPortsProtocol = "UDP"
)

// V1alpha1CommonPolicySpecNetworkV1CustomRulesPortsProtocol The protocol (TCP or UDP) which traffic must match
type V1alpha1CommonPolicySpecNetworkV1CustomRulesPortsProtocol string

func NewV1alpha1CommonPolicySpecNetworkV1CustomRulesPortsProtocol(value V1alpha1CommonPolicySpecNetworkV1CustomRulesPortsProtocol) *V1alpha1CommonPolicySpecNetworkV1CustomRulesPortsProtocol {
	v := value
	return &v
}

// V1alpha1CommonPolicySpecNetworkV1CustomRules defines model for V1alpha1CommonPolicySpecNetworkV1Custom.rules.Item.
type V1alpha1CommonPolicySpecNetworkV1CustomRules struct {

	// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. Default is this rule matches all ports (traffic not restricted by port).
	Ports *[]V1alpha1CommonPolicySpecNetworkV1CustomRulesPorts `json:"ports,omitempty"`

	// List of destinations/sources which should be able to access the pods selected for this rule. Default is the rule matches all destinations/ sources.
	// List of items of type V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0 OR V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec1
	RuleSpec []interface{} `json:"ruleSpec,omitempty"`
}

// V1alpha1CommonPolicySpecNetworkV1CustomRulesPorts defines model for V1alpha1CommonPolicySpecNetworkV1Custom.rules.Item.Port
type V1alpha1CommonPolicySpecNetworkV1CustomRulesPorts struct {
	// The port on the given protocol. This can either be a numerical or named port on a pod.
	Port *string `json:"port,omitempty"`

	// The protocol (TCP or UDP) which traffic must match.
	Protocol *V1alpha1CommonPolicySpecNetworkV1CustomRulesPortsProtocol `json:"protocol,omitempty"`
}

// V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0 defines model for V1alpha1CommonPolicySpecNetworkV1Custom.rules.Item.RuleSpec0.
type V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0 struct {
	// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the namespaceSelector and PodSelector can be set.
	IpBlock *V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0IpBlock `json:"ipBlock,omitempty"`
}

// V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0IpBlock defines model for V1alpha1CommonPolicySpecNetworkV1Custom.rules.Item.RuleSpec0.IpBlock.
type V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0IpBlock struct {

	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
	Cidr string `json:"cidr"`

	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
	Except *[]string `json:"except,omitempty"`
}

// V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec1 defines model for V1alpha1CommonPolicySpecNetworkV1Custom.rules.Item.RuleSpec1.
type V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec1 struct {

	// Use a label selector to identify the namespaces to allow as egress destinations or ingress sources.
	NamespaceSelector *[]V1alpha1CommonPolicySpecNetworkV1Labels `json:"namespaceSelector,omitempty"`

	// Use a label selector to identify the pods to allow as egress destinations or ingress sources.
	PodSelector *[]V1alpha1CommonPolicySpecNetworkV1Labels `json:"podSelector,omitempty"`
}

// MarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRules) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRules) UnmarshalBinary(b []byte) error {
	var res V1alpha1CommonPolicySpecNetworkV1CustomRules
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRulesPorts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRulesPorts) UnmarshalBinary(b []byte) error {
	var res V1alpha1CommonPolicySpecNetworkV1CustomRulesPorts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0) UnmarshalBinary(b []byte) error {
	var res V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0IpBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0IpBlock) UnmarshalBinary(b []byte) error {
	var res V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec0IpBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec1) UnmarshalBinary(b []byte) error {
	var res V1alpha1CommonPolicySpecNetworkV1CustomRulesRuleSpec1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}
