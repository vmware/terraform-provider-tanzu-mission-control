// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/swag"
)

// K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
//
// swagger:model k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
type K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement struct {

	// key is the label key that the selector applies to.
	// +patchMergeKey=key
	// +patchStrategy=merge
	Key string `json:"key,omitempty"`

	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator,omitempty"`

	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	// +optional
	Values []string `json:"values"`
}

// MarshalBinary interface implementation
func (m *K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement) UnmarshalBinary(b []byte) error {
	var res K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement

	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

type VmwareTanzuManageV1alpha1CommonBatchLabelSelector struct {

	// Match expressions is a list of label selector requirements, the requirements are ANDed.
	// Label selector requirements support 4 operators for matching labels - in, notin, exists and doesnotexist.
	MatchExpressions []*K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement `json:"matchExpressions"`
}

// MarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1CommonBatchLabelSelector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1CommonBatchLabelSelector) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1CommonBatchLabelSelector

	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// VmwareTanzuManageV1alpha1CommonBatchSelector Selector to include/exclude specific targets.
//
// swagger:model vmware.tanzu.manage.v1alpha1.common.batch.Selector
type VmwareTanzuManageV1alpha1CommonBatchSelector struct {

	// List of target names to exclude.
	ExcludedNames []string `json:"excludedNames"`

	// Label based Selector.
	LabelSelector *VmwareTanzuManageV1alpha1CommonBatchLabelSelector `json:"labelSelector,omitempty"`

	// List of target names to include.
	Names []string `json:"names"`
}

// MarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1CommonBatchSelector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1CommonBatchSelector) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1CommonBatchSelector

	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}
