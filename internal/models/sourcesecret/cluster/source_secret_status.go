// © Broadcom. All Rights Reserved.
// The term “Broadcom” refers to Broadcom Inc. and/or its subsidiaries.
// SPDX-License-Identifier: MPL-2.0

package clustersourcesecret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/swag"

	status "github.com/vmware/terraform-provider-tanzu-mission-control/internal/models/status"
)

// VmwareTanzuManageV1alpha1ClusterFluxcdSourcesecretStatus Status of the Source Secret.
//
// swagger:model vmware.tanzu.manage.v1alpha1.cluster.fluxcd.sourcesecret.Status
type VmwareTanzuManageV1alpha1ClusterFluxcdSourcesecretStatus struct {

	// Status of the service secret.
	Status *VmwareTanzuManageV1alpha1AccountCredentialStatus `json:"status,omitempty"`
}

// MarshalBinary interface implementation.
func (m *VmwareTanzuManageV1alpha1ClusterFluxcdSourcesecretStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation.
func (m *VmwareTanzuManageV1alpha1ClusterFluxcdSourcesecretStatus) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1ClusterFluxcdSourcesecretStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// VmwareTanzuManageV1alpha1AccountCredentialStatus Status of the credential.
//
// swagger:model vmware.tanzu.manage.v1alpha1.account.credential.Status
type VmwareTanzuManageV1alpha1AccountCredentialStatus struct {

	// List of available phases for a credential.
	AvailablePhases []*VmwareTanzuManageV1alpha1AccountCredentialStatusPhase `json:"availablePhases"`

	// The conditions describing a credential's status.
	//
	// - "Scheduled"
	//      * True when the credential is being created.
	//      * False if the credential cannot be created.
	// - "Ready"
	//      * True when the credential is created.
	//      * False if the credential creation failed.
	// - "Validating"
	//      * True when and if the intended service starts validating the credential.
	//      * False if the credential validation process failed. This value does not
	//        represent the validity of the credential.
	Conditions map[string]*status.VmwareTanzuCoreV1alpha1StatusCondition `json:"conditions,omitempty"`

	// Phase of the credential.
	Phase *VmwareTanzuManageV1alpha1AccountCredentialStatusPhase `json:"phase,omitempty"`

	// Additional information about the phase.
	PhaseInfo string `json:"phaseInfo,omitempty"`

	// The list of references. i.e. resources using the credential.
	References []*VmwareTanzuManageV1alpha1AccountCredentialReference `json:"references"`
}

// MarshalBinary interface implementation.
func (m *VmwareTanzuManageV1alpha1AccountCredentialStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation.
func (m *VmwareTanzuManageV1alpha1AccountCredentialStatus) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1AccountCredentialStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// VmwareTanzuManageV1alpha1AccountCredentialStatusPhase The overall phase of a credential.
//
//   - PHASE_UNSPECIFIED: Unspecified phase.
//   - CREATED: The credential is created and can be used.
//   - VALIDATING: The credential's capabilities are being validated by the intended service.
//
// Credentials can be used even if they have not been validated- this phase
// is set by the intended service if it validates credentials.
//   - VALID: The credential satisfies the intended service's requirements.
//   - INVALID: The credential does not satisfy the intended service's requirements.
//
// Invalid credentials might require user action to fix their permissions- this information
// is provided by the intended service.
//   - ERROR: An error occurred while the credential was being created or validated.
//   - DELETING: The credential clean up has begun.
//   - DELETED: The credential clean up has completed and will be removed from TMC.
//
// swagger:model vmware.tanzu.manage.v1alpha1.account.credential.Status.Phase
type VmwareTanzuManageV1alpha1AccountCredentialStatusPhase string

func NewVmwareTanzuManageV1alpha1AccountCredentialStatusPhase(value VmwareTanzuManageV1alpha1AccountCredentialStatusPhase) *VmwareTanzuManageV1alpha1AccountCredentialStatusPhase {
	return &value
}

// nolint: gosec
const (

	// VmwareTanzuManageV1alpha1AccountCredentialStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED".
	VmwareTanzuManageV1alpha1AccountCredentialStatusPhasePHASEUNSPECIFIED VmwareTanzuManageV1alpha1AccountCredentialStatusPhase = "PHASE_UNSPECIFIED"

	// VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseCREATED captures enum value "CREATED".
	VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseCREATED VmwareTanzuManageV1alpha1AccountCredentialStatusPhase = "CREATED"

	// VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseVALIDATING captures enum value "VALIDATING".
	VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseVALIDATING VmwareTanzuManageV1alpha1AccountCredentialStatusPhase = "VALIDATING"

	// VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseVALID captures enum value "VALID".
	VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseVALID VmwareTanzuManageV1alpha1AccountCredentialStatusPhase = "VALID"

	// VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseINVALID captures enum value "INVALID".
	VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseINVALID VmwareTanzuManageV1alpha1AccountCredentialStatusPhase = "INVALID"

	// VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseERROR captures enum value "ERROR".
	VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseERROR VmwareTanzuManageV1alpha1AccountCredentialStatusPhase = "ERROR"

	// VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseDELETING captures enum value "DELETING".
	VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseDELETING VmwareTanzuManageV1alpha1AccountCredentialStatusPhase = "DELETING"

	// VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseDELETED captures enum value "DELETED".
	VmwareTanzuManageV1alpha1AccountCredentialStatusPhaseDELETED VmwareTanzuManageV1alpha1AccountCredentialStatusPhase = "DELETED"
)

// for schema.
var vmwareTanzuManageV1alpha1AccountCredentialStatusPhaseEnum []interface{}

func init() {
	var res []VmwareTanzuManageV1alpha1AccountCredentialStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","CREATED","VALIDATING","VALID","INVALID","ERROR","DELETING","DELETED"]`), &res); err != nil {
		panic(err)
	}

	for _, v := range res {
		vmwareTanzuManageV1alpha1AccountCredentialStatusPhaseEnum = append(vmwareTanzuManageV1alpha1AccountCredentialStatusPhaseEnum, v)
	}
}

// VmwareTanzuManageV1alpha1AccountCredentialReference Reference contains information on another TMC resource using this credential.
// Credentials with references cannot be deleted as they are being used by some resource.
//
// swagger:model vmware.tanzu.manage.v1alpha1.account.credential.Reference
type VmwareTanzuManageV1alpha1AccountCredentialReference struct {

	// UID of the reference.
	ReferenceUID *VmwareTanzuCoreV1alpha1ObjectUID `json:"referenceUid,omitempty"`

	// The RID of the resource referencing the credential.
	ResourceID *VmwareTanzuCoreV1alpha1ObjectReference `json:"resourceId,omitempty"`
}

// MarshalBinary interface implementation.
func (m *VmwareTanzuManageV1alpha1AccountCredentialReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation.
func (m *VmwareTanzuManageV1alpha1AccountCredentialReference) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1AccountCredentialReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// VmwareTanzuCoreV1alpha1ObjectUID UID is a unique identifier for a resource.
//
// swagger:model vmware.tanzu.core.v1alpha1.object.UID
type VmwareTanzuCoreV1alpha1ObjectUID struct {

	// UID for the object.
	Value string `json:"value,omitempty"`
}

// MarshalBinary interface implementation.
func (m *VmwareTanzuCoreV1alpha1ObjectUID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation.
func (m *VmwareTanzuCoreV1alpha1ObjectUID) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuCoreV1alpha1ObjectUID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}

// VmwareTanzuCoreV1alpha1ObjectReference Reference references a foreign resource.
//
// swagger:model vmware.tanzu.core.v1alpha1.object.Reference
type VmwareTanzuCoreV1alpha1ObjectReference struct {

	// RID for the object.
	Rid string `json:"rid,omitempty"`

	// UID for the object.
	UID string `json:"uid,omitempty"`
}

// MarshalBinary interface implementation.
func (m *VmwareTanzuCoreV1alpha1ObjectReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}

	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation.
func (m *VmwareTanzuCoreV1alpha1ObjectReference) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuCoreV1alpha1ObjectReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}

	*m = res

	return nil
}
