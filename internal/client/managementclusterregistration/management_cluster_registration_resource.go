// © Broadcom. All Rights Reserved.
// The term “Broadcom” refers to Broadcom Inc. and/or its subsidiaries.
// SPDX-License-Identifier: MPL-2.0

// Code generated by go-swagger; DO NOT EDIT.

package managementclusterregistrationclient

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/url"

	"github.com/vmware/terraform-provider-tanzu-mission-control/internal/client/transport"
	"github.com/vmware/terraform-provider-tanzu-mission-control/internal/helper"
	registration "github.com/vmware/terraform-provider-tanzu-mission-control/internal/models/managementcluster"
)

const (
	queryParamKeyForce = "force"

	apiVersionAndGroup = "v1alpha1/managementclusters"

	manifestApiVersionAndGroup = "v1alpha1/managementclusters:manifest"

	reregisterApiVersionAndGroup = "v1alpha1/managementclusters:reregister"

	queryParamKeyOrgID = "fullName.orgId"
)

/*
Client for management cluster registration resource service API
*/
type Client struct {
	*transport.Client
}

func New(transport *transport.Client) ClientService {
	return &Client{Client: transport}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ManagementClusterResourceServiceCreate(request *registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterRequest) (*registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse, error)

	ManagementClusterResourceReregisterService(request *registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterRequest) (*registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse, error)

	ManagementClusterResourceServiceDelete(request *registration.VmwareTanzuManageV1alpha1ManagementclusterFullName, force string) error

	ManagementClusterResourceServiceGet(request *registration.VmwareTanzuManageV1alpha1ManagementclusterFullName) (*registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse, error)

	ManagementClusterResourceServiceUpdate(reguest *registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterRequest) (*registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse, error)

	ManagementClusterManifestHelperGetManifest(request *registration.VmwareTanzuManageV1alpha1ManagementclusterFullName) (*registration.VmwareTanzuManageV1alpha1ManagementclusterManagementClusterGetManifestResponse, error)
}

/*
ManagementClusterResourceServiceCreate creates a management cluster registration
*/
func (c *Client) ManagementClusterResourceServiceCreate(request *registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterRequest) (*registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse, error) {
	response := &registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse{}
	err := c.Create(apiVersionAndGroup, request, response)

	return response, err
}

/*
ManagementClusterResourceReregisterService reregisters management cluster registration
*/
func (c *Client) ManagementClusterResourceReregisterService(request *registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterRequest) (*registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse, error) {
	response := &registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse{}
	requestURL := helper.ConstructRequestURL(reregisterApiVersionAndGroup, request.ManagementCluster.FullName.Name).String()

	err := c.Create(requestURL, request, response)

	return response, err
}

/*
ManagementClusterResourceServiceDelete deletes a management cluster registration
*/
func (a *Client) ManagementClusterResourceServiceDelete(fn *registration.VmwareTanzuManageV1alpha1ManagementclusterFullName, force string) error {
	queryParams := url.Values{
		queryParamKeyForce: []string{force},
	}
	if fn.OrgID != "" {
		queryParams.Add(queryParamKeyOrgID, fn.OrgID)
	}

	requestURL := helper.ConstructRequestURL(apiVersionAndGroup, fn.Name).AppendQueryParams(queryParams).String()

	return a.Delete(requestURL)
}

/*
ManagementClusterResourceServiceGet gets a management cluster registration
*/
func (a *Client) ManagementClusterResourceServiceGet(params *registration.VmwareTanzuManageV1alpha1ManagementclusterFullName) (*registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse, error) {
	queryParams := url.Values{}
	if params.OrgID != "" {
		queryParams.Add(queryParamKeyOrgID, params.OrgID)
	}

	requestURL := helper.ConstructRequestURL(apiVersionAndGroup, params.Name).AppendQueryParams(queryParams).String()
	response := &registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse{}
	err := a.Get(requestURL, response)

	return response, err
}

/*
ManagementClusterResourceServiceUpdate updates overwrite a management cluster registration
*/
func (a *Client) ManagementClusterResourceServiceUpdate(request *registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterRequest) (*registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse, error) {
	requestURL := helper.ConstructRequestURL(apiVersionAndGroup, request.ManagementCluster.FullName.Name).String()
	clusterGroupResponse := &registration.VmwareTanzuManageV1alpha1ManagementclusterCreateManagementClusterResponse{}
	err := a.Update(requestURL, request, clusterGroupResponse)

	return clusterGroupResponse, err
}

/*
ManagementClusterManifestHelperGetManifest obtains manifests that are associated with management cluster registration
*/
func (a *Client) ManagementClusterManifestHelperGetManifest(params *registration.VmwareTanzuManageV1alpha1ManagementclusterFullName) (*registration.VmwareTanzuManageV1alpha1ManagementclusterManagementClusterGetManifestResponse, error) {
	queryParams := url.Values{}
	if params.OrgID != "" {
		queryParams.Add(queryParamKeyOrgID, params.OrgID)
	}

	requestURL := helper.ConstructRequestURL(manifestApiVersionAndGroup, params.Name).AppendQueryParams(queryParams).String()
	response := &registration.VmwareTanzuManageV1alpha1ManagementclusterManagementClusterGetManifestResponse{}

	err := a.Get(requestURL, response)

	return response, err
}
